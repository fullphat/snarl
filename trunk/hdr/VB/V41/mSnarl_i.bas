Attribute VB_Name = "mSnarl41_i"
Option Explicit

    ' /*
    '
    '   mSnarl41_i.bas -- Snarl V41 Visual Basic 5/6 header file
    '
    '   Include this module to let your VB5 or VB6 application to talk to Snarl.
    '
    '   © 2004-2011 full phat products.  All Rights Reserved.
    '
    '        Version: 41 (R2.3)
    '       Revision: 65
    '        Created: 6-Dec-2004
    '   Last Updated: 8-Feb-2011
    '         Author: full phat products
    '        Licence: Simplified BSD License (http://www.opensource.org/licenses/bsd-license.php)
    '
    '   Notes
    '   -----
    '
    '   This include file can be used in conjunction with the Snarl API documentation
    '   (http://www.fullphat.net/dev/api.htm) when porting Snarl support to a different
    '   programming language.  This include file is always the most up-to-date of any
    '   of them as Snarl is natively coded in Visual Basic 6.  (An important point to
    '   note here is that if you're reading this because you downloaded this file as
    '   part of the Snarl CVS then you should use the include file that came with the
    '   latest release of Snarl as that will be the current *supported* one).
    '
    '   As best as possible all functions are documented here, including the local and
    '   supporting ones which are VB-specific.
    '
    '
    '   Revision History
    '   ----------------
    '
    '
    ' */


    ' /* some win32 declares */

Private Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
Private Declare Function GetClipboardFormatName Lib "user32" Alias "GetClipboardFormatNameA" (ByVal wFormat As Long, ByVal lpString As String, ByVal nMaxCount As Long) As Long
Private Declare Function GetCurrentProcessId Lib "kernel32" () As Long
Private Declare Function GetProp Lib "user32" Alias "GetPropA" (ByVal hwnd As Long, ByVal lpString As String) As Long
Private Declare Function IsWindow Lib "user32" (ByVal hwnd As Long) As Long
Private Declare Function RegisterWindowMessage Lib "user32" Alias "RegisterWindowMessageA" (ByVal lpString As String) As Long
Private Declare Function SendMessageTimeout Lib "user32" Alias "SendMessageTimeoutA" (ByVal hwnd As Long, ByVal Msg As Long, ByVal wParam As Long, lParam As Any, ByVal fuFlags As Long, ByVal uTimeout As Long, lpdwResult As Long) As Long
Private Declare Function SetProp Lib "user32" Alias "SetPropA" (ByVal hwnd As Long, ByVal lpString As String, ByVal hData As Long) As Long
Private Declare Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As Long, ByVal dwFlags As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long, ByVal lpMultiByteStr As Long, ByVal cchMultiByte As Long, ByVal lpDefaultChar As Long, lpUsedDefaultChar As Long) As Long

Private Const SMTO_ABORTIFHUNG = 2
Private Const CP_UTF8 = 65001
Private Const WM_COPYDATA = &H4A

Private Type COPYDATASTRUCT
    dwData As Long
    cbData As Long
    lpData As Long

End Type

    ' /* local variables */

Dim mLocalErr As Long

    ' /* command constants */

Private Enum SNARL_COMMANDS
    SNARL41_REGISTER_APP = 1        '// for this command, SNARLMSG->Token is actually the sending app's PID
    SNARL41_UNREGISTER_APP
    SNARL41_UPDATE_APP
    SNARL41_SET_CALLBACK
    SNARL41_ADD_CLASS
    SNARL41_REMOVE_CLASS
    SNARL41_NOTIFY
    SNARL41_UPDATE_NOTIFICATION
    SNARL41_HIDE_NOTIFICATION
    SNARL41_IS_NOTIFICATION_VISIBLE
    SNARL41_LAST_ERROR              '// deprecated but retained for backwards compatability

End Enum

    ' /* low-level message transport */

Private Type SNARLMSG
    Command As SNARL_COMMANDS
    Token As Long
    PacketData As String * 2048             ' // actually 4096 bytes

End Type

    ' /* status codes */

Public Enum SNARL_STATUS_41
    SNARL_SUCCESS = 0

    ' /* critical errors */

    SNARL_ERROR_FAILED = 101              '// miscellaneous failure
    SNARL_ERROR_UNKNOWN_COMMAND           '// specified command not recognised
    SNARL_ERROR_TIMED_OUT                 '// Snarl took too long to respond

    SNARL_ERROR_BAD_PACKET = 107          '// SNP only

    SNARL_ERROR_ARG_MISSING = 109         '// required argument missing
    SNARL_ERROR_SYSTEM                    '// internal system error

    ' /* warnings */

    SNARL_ERROR_NOT_RUNNING = 201         '// Snarl handling window not found
    SNARL_ERROR_NOT_REGISTERED
    SNARL_ERROR_ALREADY_REGISTERED        '// not used yet; sn41RegisterApp() returns existing token
    SNARL_ERROR_CLASS_ALREADY_EXISTS      '// not used yet
    SNARL_ERROR_CLASS_BLOCKED
    SNARL_ERROR_CLASS_NOT_FOUND
    SNARL_ERROR_NOTIFICATION_NOT_FOUND
    SNARL_ERROR_FLOODING                  '// notification generated by same class within quantum

End Enum


    ' /* application flags */

Public Enum SNARL_APP_FLAGS
    SNARL_APP_HAS_PREFS = 1
    SNARL_APP_HAS_ABOUT = 2
    SNARL_APP_IS_WINDOWLESS = &H8000&

End Enum

Public Const SNARL_APP_PREFS = 1
Public Const SNARL_APP_ABOUT = 2


    ' /*
    '
    '   Global event identifiers
    '   these values appear in wParam.
    '
    ' */

Private Const SNARL_GLOBAL_MSG = "SnarlGlobalEvent"

Public Const SNARL_BROADCAST_LAUNCHED = 1       ' // Snarl has just started running
Public Const SNARL_BROADCAST_QUIT = 2           ' // Snarl is about to stop running
Public Const SNARL_BROADCAST_STOPPED = 3        ' // sent when stopped by user
Public Const SNARL_BROADCAST_STARTED = 4        ' // sent when started by user

Private Const SNARL_APP_MSG = "SnarlAppMessage"

'Public Enum SNARL41_NOTIFICATION_FLAGS
'    SNARL41_NOTIFICATION_ALLOWS_MERGE = 1
'    SNARL41_NOTIFICATION_AUTO_DISMISS = 2
'
'End Enum

    ' /*
    '
    '   feedback event codes (Win32 api only)
    '
    '   These are sent by Snarl to the window specified in snShowMessage() when the
    '   Snarl Notification raised times out or the user clicks on it.
    '
    ' */

Private Const SNARL41_NOTIFICATION_CLICKED = 32         ' // notification was right-clicked by user
Private Const SNARL41_NOTIFICATION_TIMED_OUT = 33
Private Const SNARL41_NOTIFICATION_ACK = 34             ' // notification was left-clicked by user
Private Const SNARL41_NOTIFICATION_MENU = 35            ' // V39 - menu item selected
Private Const SNARL41_NOTIFICATION_MIDDLE_BUTTON = 36   ' // V39 - notification middle-clicked by user
Private Const SNARL41_NOTIFICATION_CLOSED = 37          ' // V39 - user clicked the close gadget
'Public Const SNARL_NOTIFICATION_ACTION = 38             ' // V42 - user selected an action (high word of wParam contains action index)

    ' /* Added in V37 (R1.6) -- same value, just improved the meaning of it */

Private Const SNARL41_NOTIFICATION_CANCELLED = SNARL41_NOTIFICATION_CLICKED


' /****************************************************************************************
' /*
' /*
' /*                                Internal helper functions
' /*
' /*
' /*
' /****************************************************************************************/

Private Function uSend(ByRef pSnarlReq As SNARLMSG) As Long
Dim hwnd As Long

    ' /* return zero on failure */

    hwnd = sn41GetSnarlWindow()
    If IsWindow(hwnd) = 0 Then
        mLocalErr = SNARL_ERROR_NOT_RUNNING
        Exit Function

    End If

Dim pcds As COPYDATASTRUCT
Dim dw As Long

    With pcds
        .dwData = &H534E4C02            ' // "SNL",2
        .cbData = LenB(pSnarlReq)
        .lpData = VarPtr(pSnarlReq)

    End With

    ' /* return zero on failure */

    If SendMessageTimeout(hwnd, WM_COPYDATA, GetCurrentProcessId(), pcds, SMTO_ABORTIFHUNG, 1000, dw) <> 0 Then
        ' /* return result and cache LastError */
        uSend = dw
        mLocalErr = GetProp(hwnd, "last_error")

    Else
        ' /* timed out */
        uSend = 0
        mLocalErr = SNARL_ERROR_TIMED_OUT

    End If

End Function

Public Function uToUTF8(ByVal str As String) As String
Dim stBuffer As String
Dim cwch As Long
Dim pwz As Long
Dim pwzBuffer As Long

    On Error GoTo ex

    If str = "" Then _
        Exit Function

    pwz = StrPtr(str)
    cwch = WideCharToMultiByte(CP_UTF8, 0, pwz, -1, 0&, 0&, ByVal 0&, ByVal 0&)
    stBuffer = String$(cwch + 1, vbNullChar)
    pwzBuffer = StrPtr(stBuffer)
    cwch = WideCharToMultiByte(CP_UTF8, 0, pwz, -1, pwzBuffer, Len(stBuffer), ByVal 0&, ByVal 0&)
    uToUTF8 = Left$(stBuffer, cwch - 1)

ex:
End Function



' /****************************************************************************************
' /*
' /*
' /*                                Public Win32 API
' /*
' /*
' /*
' /****************************************************************************************/

Public Function sn41RegisterApp(ByVal Signature As String, ByVal Title As String, ByVal Icon As String, Optional ByVal hWndReply As Long, Optional ByVal uMsgReply As Long, Optional ByVal Flags As SNARL_APP_FLAGS, Optional ByVal Password As String) As Long
Dim pReq As SNARLMSG

    With pReq
        .Command = SNARL41_REGISTER_APP
        .Token = 0
        .PacketData = uToUTF8("id::" & Signature & "#?title::" & Title & "#?icon::" & Icon & "#?" & _
                              "hwnd::" & CStr(hWndReply) & "#?" & _
                              "umsg::" & CStr(uMsgReply) & "#?" & _
                              "flags::" & CStr(Flags) & _
                              IIf(Password <> "", "#?password::" & Password, "") _
                              )

    End With

    sn41RegisterApp = uSend(pReq)

End Function

'Public Function sn41SetCallback(ByVal Token As Long, ByVal hWnd As Long, ByVal ReplyMsg As Long) As Long
'Dim pReq As SNARLMSG
'
'    With pReq
'        .Command = SNARL41_SET_CALLBACK
'        .Token = Token
'        .PacketData = uToUTF8("hwnd::" & CStr(hWnd) & "#?umsg::" & CStr(ReplyMsg))
'
'    End With
'
'    sn41SetCallback = uSend(pReq)
'
'End Function

Public Function sn41UnregisterApp(ByVal AppToken As Long) As Long
Dim pReq As SNARLMSG

    With pReq
        .Command = SNARL41_UNREGISTER_APP
        .Token = AppToken
        .PacketData = uToUTF8("")

    End With

    sn41UnregisterApp = uSend(pReq)

End Function

Public Function sn41UpdateApp(ByVal AppToken As Long, Optional ByVal Title As String, Optional ByVal Icon As String) As Long
Dim pReq As SNARLMSG
Dim sz As String

    With pReq
        .Command = SNARL41_UPDATE_APP
        .Token = AppToken

        If Title <> "" Then _
            sz = sz & "title::" & Title

        If Icon <> "" Then
            If sz <> "" Then _
                sz = sz & "#?"

            sz = sz & "icon::" & Icon

        End If

        .PacketData = uToUTF8(sz)

    End With

    sn41UpdateApp = uSend(pReq)

End Function

Public Function sn41AddClass(ByVal Token As Long, ByVal ClassName As String, ByVal Description As String, Optional ByVal Enabled As Boolean = True, Optional ByVal Icon As String) As Long
Dim pReq As SNARLMSG

    With pReq
        .Command = SNARL41_ADD_CLASS
        .Token = Token
        .PacketData = uToUTF8("id::" & ClassName & "#?name::" & Description & "#?enabled::" & IIf(Enabled, "1", "0") & "#?icon::" & Icon)

    End With

    sn41AddClass = uSend(pReq)

End Function

Public Function sn41RemoveClass(ByVal AppToken As Long, ByVal ClassName As String, Optional ByVal ForgetSettings As Boolean) As Long
Dim pReq As SNARLMSG

    With pReq
        .Command = SNARL41_REMOVE_CLASS
        .Token = AppToken
        .PacketData = uToUTF8("id::" & ClassName & IIf(ForgetSettings, "#?forget::1", ""))

    End With

    sn41RemoveClass = uSend(pReq)

End Function

Public Function sn41RemoveAllClasses(ByVal AppToken As Long, Optional ByVal ForgetSettings As Boolean) As Long
Dim pReq As SNARLMSG

    With pReq
        .Command = SNARL41_REMOVE_CLASS
        .Token = AppToken
        .PacketData = uToUTF8("all::1" & IIf(ForgetSettings, "#?forget::1", ""))

    End With

    sn41RemoveAllClasses = uSend(pReq)

End Function

Public Function sn41EZNotify(ByVal AppToken As Long, ByVal ClassName As String, ByVal Title As String, ByVal Text As String, Optional ByVal Timeout As Long = -1, Optional ByVal Icon As String, Optional ByVal Priority As Long = 0, Optional ByVal Callback As String, Optional ByVal Value As Integer = -1, Optional ByVal AdditionalData As String) As Long
Dim pReq As SNARLMSG
Dim sz As String

    sz = "id::" & ClassName & _
         "#?title::" & Title & _
         "#?text::" & Text & _
         "#?timeout::" & CStr(Timeout) & _
         "#?icon::" & Icon & _
         "#?priority::" & CStr(Priority) & _
         "#?callback::" & Callback

    If (Value >= 0) And (Value <= 100) Then _
        sz = sz & "#?value-percent::" & CStr(Value)

'    sz = sz & "#?flags::" & Hex$(Flags)
'
'    If Password <> "" Then _
'        sz = sz & "#?password::" & Password

'    If (Flags And SNARL41_NOTIFICATION_ALLOWS_MERGE) Then _
'        sz = sz & "#?merge::1"

    If AdditionalData <> "" Then _
        sz = sz & "#?" & AdditionalData

    With pReq
        .Command = SNARL41_NOTIFY
        .Token = AppToken
        .PacketData = uToUTF8(sz)

    End With

    sn41EZNotify = uSend(pReq)

End Function

Public Function sn41Notify(ByVal AppToken As Long, ByVal ClassName As String, ByVal PacketData As String) As Long
Dim pReq As SNARLMSG

    With pReq
        .Command = SNARL41_NOTIFY
        .Token = AppToken
        .PacketData = uToUTF8("id::" & ClassName & "#?" & PacketData)

    End With

    sn41Notify = uSend(pReq)

End Function

Public Function sn41EZUpdate(ByVal Token As Long, Optional ByVal Title As String = "/?", Optional ByVal Text As String = "/?", Optional ByVal Timeout As Long = &H80000000, Optional ByVal Icon As String = "/?", Optional ByVal AdditionalData As String) As Long
Dim pReq As SNARLMSG
Dim sz As String

    With pReq
        .Command = SNARL41_UPDATE_NOTIFICATION
        .Token = Token

        ' /* only add the following if they were explicitly provided */

        If Title <> "/?" Then _
            sz = sz & "title::" & Title

        If Text <> "/?" Then
            If sz <> "" Then _
                sz = sz & "#?"

            sz = sz & "text::" & Text

        End If

        If Icon <> "/?" Then
            If sz <> "" Then _
                sz = sz & "#?"

            sz = sz & "icon::" & Icon

        End If

        If Timeout <> &H80000000 Then
            If sz <> "" Then _
                sz = sz & "#?"

            sz = sz & "timeout::" & CStr(Timeout)

        End If

        If AdditionalData <> "" Then _
            sz = sz & "#?" & AdditionalData



        .PacketData = uToUTF8(sz)

    End With

    sn41EZUpdate = uSend(pReq)

End Function

Public Function sn41Update(ByVal Token As Long, ByVal PacketData As String) As Long
Dim pReq As SNARLMSG

    With pReq
        .Command = SNARL41_UPDATE_NOTIFICATION
        .Token = Token
        .PacketData = uToUTF8(PacketData)

    End With

    sn41Update = uSend(pReq)

End Function

Public Function sn41Hide(ByVal Token As Long) As Long
Dim pReq As SNARLMSG

    With pReq
        .Command = SNARL41_HIDE_NOTIFICATION
        .Token = Token

    End With

    sn41Hide = uSend(pReq)

End Function

Public Function sn41IsVisible(ByVal Token As Long) As Long
Dim pReq As SNARLMSG

    With pReq
        .Command = SNARL41_IS_NOTIFICATION_VISIBLE
        .Token = Token

    End With

    sn41IsVisible = uSend(pReq)

End Function

Public Function sn41GetLastError() As SNARL_STATUS_41

    sn41GetLastError = mLocalErr

End Function

Public Function sn41IsSnarlRunning() As Boolean

    sn41IsSnarlRunning = (IsWindow(sn41GetSnarlWindow()) <> 0)

End Function

Public Function sn41GetVersion() As Long
Dim hwnd As Long
Dim dw As Long

    ' /* return zero on failure */

    mLocalErr = 0

    hwnd = sn41GetSnarlWindow()
    If IsWindow(hwnd) = 0 Then
        mLocalErr = SNARL_ERROR_NOT_RUNNING
        Exit Function

    End If

    sn41GetVersion = GetProp(hwnd, "_version")

End Function

' /*
'   sn41GetSnarlWindow() -- returns a handle to the Snarl Dispatcher window  (V37)
'
'   Synopsis
'
'       int32 sn41GetSnarlWindow()
'
'   Inputs
'       None
'
'   Results
'       Returns handle to Snarl Dispatcher window, or zero if it's not found
'
'   Notes
'       This is now the preferred way to test if Snarl is actually running
'
' */
Public Function sn41GetSnarlWindow() As Long

    sn41GetSnarlWindow = FindWindow("w>Snarl", "Snarl")
'    If sn41GetSnarlWindow = 0 Then _
        sn41GetSnarlWindow = FindWindow(vbNullString, "Snarl")

End Function

'' /*
''   sn41SetAsSnarlApp() -- identifies an application as a Snarl App.  (V39)
''
''   Inputs
''       hWndOwner - the window to be used when registering
''       Flags - features this app supports
''
''   Results
''       No return value.
''
'' */
'
'Public Sub sn41SetAsSnarlApp(ByVal hWndOwner As Long, Optional ByVal Flags As SNARL_APP_FLAGS = SNARL_APP_HAS_ABOUT Or SNARL_APP_HAS_PREFS)
'
'    If IsWindow(hWndOwner) <> 0 Then
'        SetProp hWndOwner, "snarl_app", 1
'        SetProp hWndOwner, "snarl_app_flags", Flags
'
'    End If
'
'End Sub

' /*
'   sn41Broadcast() -- returns the value of Snarl's global registered message
'
'   Synopsis
'
'       int32 snGetGlobalMsg()
'
'   Inputs
'       None
'
'   Results
'       A 16-bit value (translated to 32-bit) which is the registered Windows
'       message for Snarl.
'
'   Notes
'       Snarl registers SNARL_GLOBAL_MSG during startup which it then uses to
'       communicate with all running applications through a Windows broadcast
'       message.  This function can only fail if for some reason the Windows
'       RegisterWindowMessage() function fails - given this, this function
'       *cannnot* be used to test for the presence of Snarl.
'
' */
Public Function sn41Broadcast() As Long

    sn41Broadcast = RegisterWindowMessage(SNARL_GLOBAL_MSG)

End Function

' /*
'   sn41AppMsg() -- Returns the global Snarl Application message  (V39)
'
'   Inputs
'       None
'
'   Results
'       Snarl Application registered message.
'
' */

Public Function sn41AppMsg() As Long

    sn41AppMsg = RegisterWindowMessage(SNARL_APP_MSG)

End Function

' /*
'   sn41GetConfigPath() -- Returns a path to Snarl's config folder  (V41)
'
'   Inputs
'       None
'
'   Results
'       Snarl Application registered message.
'
' */

Public Function sn41GetConfigPath() As String
Dim h As Long

    h = sn41GetSnarlWindow()
    If h = 0 Then _
        Exit Function

Dim lAtom As Long

    lAtom = GetProp(h, "_config_path")
    If lAtom = 0 Then _
        Exit Function

Dim sz As String

    sz = String$(1024, 0)
    h = GetClipboardFormatName(lAtom, sz, Len(sz))
    If h > 0 Then _
        sn41GetConfigPath = Left$(sz, h) & "etc\"

End Function

Public Function sn42GetConfigPath(ByRef Path As String) As Boolean

    Path = sn41GetConfigPath()
    sn42GetConfigPath = (Path <> "")

End Function

'Public Function sn42AddAction(ByVal Token As Long, ByVal Label As String, Optional ByVal Command As String) As Long
'Dim pReq As SNARLMSG
'
'    With pReq
'        .Command = SNARL42_ADD_ACTION
'        .Token = Token
'        .PacketData = uToUTF8("label::" & Label & IIf(Command <> "", "#?cmd::" & Command, ""))
'
'    End With
'
'    sn42AddAction = uSend(pReq)
'
'End Function
'
'Public Function sn42ClearActions(ByVal Token As Long) As Long
'Dim pReq As SNARLMSG
'
'    With pReq
'        .Command = SNARL42_CLEAR_ACTIONS
'        .Token = Token
'
'    End With
'
'    sn42ClearActions = uSend(pReq)
'
'End Function
'
'Public Function sn42ShowRequester(ByVal hWndReplyTo As Long, ByVal ReplyMsg As Long, ByVal Text As String, Optional ByVal SubText As String, Optional ByVal IconPath As String, Optional ByVal Duration As Long = -1, Optional ByVal Actions As String)
'Dim pReq As SNARLMSG
'
'    With pReq
'        .Command = SNARL42_SHOW_REQUEST
'        .Token = GetCurrentProcessId()
'        .PacketData = uToUTF8("hwnd::" & CStr(hWndReplyTo) & "#?reply::" & CStr(ReplyMsg) & "#?text::" & Text & "#?subtext::" & SubText & "#?icon::" & IconPath & "#?duration::" & Duration & "#?actions::" & Actions)
'
'    End With
'
'    sn42ShowRequester = uSend(pReq)
'
'End Function
'
'Public Function sn42Send(ByVal Request As String) As Long
'Dim pReq As SNARLMSG
'
'    ' /* should be in SNP2.0 format (i.e. arg=value&arg=value) */
'
'    With pReq
'        .Command = SNARL42_PARSE
'        .Token = GetCurrentProcessId()
'        .PacketData = uToUTF8(Request)
'
'    End With
'
'    sn42Send = uSend(pReq)
'
'End Function


